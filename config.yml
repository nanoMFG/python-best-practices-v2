title: Python Best Practices Version 2
tagline: Learn the best practices for coding in Python
description: This course covers the best Python coding practices every developer should know.

template:
  name: python-best-practices-course
  repo: python-best-practices-v2-template
  description: Description

before:
  - type: updateBranchProtection

    store:
      repository_name: '{{ payload.repository.name }}'
      repository_url: '{{ payload.repository.html_url }}'
      repository_owner: '{{ payload.repository.owner.login }}'
      repository_default_branch: '{{ payload.repository.default_branch }}'
  # Get the sha hash of the main branch
  - type: octokit
    method: repos.getBranch
    owner: "{{ store.repository_owner }}"
    repo: "{{ store.repository_name }}"
    branch: "{{ store.repository_default_branch }}"
    store:
      main_sha: "%result.data.commit.sha%"
  #   Create the first issue  
  - type: createIssue
    title: Set up a Python Project
    body: 01_setup-python-project.md
    store: 
      first_issue_num: '{{result.data.number}}'
      first_issue_url: '{{result.data.html_url}}'
    comments:
      - 00_directory-structure.md
  # Create first pull request
  #- type: createPullRequest
  #  title: "Add first files to the project"
  #  body: "nothing yet"
  #  head: "add-first-files"
  #  store:
  #    first_pull_num: "{{result.data.number}}"
  #    first_pull_url: "{{result.data.html_url}}"
  # Create branch for 01 steps
  # Not sure why this doesn't work
  # Plan B, add the branch to the template repo
  # sync with master, addfile to branch openPR...
  #- type: octokit
  #  method: git.createRef
  #  owner: "{{ store.repository_owner }}"
  #  repo: "{{ store.repository_name }}"
  #  ref: "refs/heads/add-first-files"
  #  sha: "{{ store.main_sha }}"
    #store:
    #  first_branch_url: "%result.data.url%"
    #  first_branch_name: "add-first-files"
  
  
  # Make sure startup is synced with main
  #   
  # Create the README.md file for the user
  - type: createFile
    filename: "t-README-template.md"
    new_name: "README.md"
    branch: "startup"
    message: "Added a README.md from template"
  # Open the first PR
  - type: createPullRequest
    title: "Add preliminary files"
    body: "01_pull-request-body.md"
    head: "startup"
    data:
      fileschangedlink: "%store.repository_url%/pull/2/files"
    store:
      first_pull_num: "{{ result.data.number }}"
      first_pull_url: "{{ result.data.html_url }}"
  # Respond in first issue with first activity
  - type: respond
    with: 01_add-a-README.md
    issue: "{{store.first_issue_num}}"
    data:
      readmelink: "%store.first_pull_url%"
  
# A list of steps that take the learner through the course
# Create one step for each action that a learner will complete

steps:
# Step 1-1: Review the README.
#
#
  - title: Start Here!
    description: Add a pull request review to approve the README.md file
    event: pull_request_review.submitted
    link: '{{store.first_issue_url}}'
    actions:
      - type: respond
        with: 01_added-README.md
        issue: "{{ store.first_pull_num }}"
        data:
         quicklink: "%store.repository_url%/new/%payload.pull_request.head.ref%?filename=LICENSE"

  #############################################################
  # Step 1-2
  #############################################################
  - title: Add a LICENSE file. 
    description: Use GitHub to add a LICENSE file from a template.
    event: pull_request.synchronize
    link: '{{store.first_pull_url}}' 
    actions:
    ###########################################################
    # Validate the filepath for the expected file
    ###########################################################
      # get tree
      - type: getTree
        action_id: isInTree
        recursive: true
        sha: "%payload.pull_request.head.sha%"

      # check for a file in a tree
      - type: gate
        left: "%actions.isInTree.data.tree%"
        operator: includes
        right: "path:LICENSE"
        else:
          # if file isn't where expected find true location
          - type: findInTree
            path: LICENSE
            tree: "%actions.isInTree.data.tree%"
            action_id: fileLocation
          # help user with proper file location
          - type: respond
            with: e-wrong-file-location.md
            data:
              haveFile: "%actions.fileLocation.path%"
              needFile: "LICENSE"
              editLink: "%payload.repository.html_url%/edit/%payload.pull_request.head.ref%/%actions.fileLocation.path%"
              fileName: LICENSE
        #######################################################
        # End filepath verification
        #######################################################
      - type: respond
        with: 01_added-LICENSE.md
        data:
          quicklink: "%store.repository_url%/new/%payload.pull_request.head.ref%?filename=.gitignore"
  
  #############################################################
  # Step 1-3
  #############################################################
  - title: Add a .gitignore file. 
    description: Use GitHub to add a .gitignore file from a template.
    event: pull_request.synchronize
    link: '{{store.first_pull_url}}' 
    actions:
    ###########################################################
    # Validate the filepath for the expected file
    ###########################################################
      # get tree
      - type: respond
        with: d-check-a-value.md
        data:
          value: "Checking for .gitignore..."
      - type: getTree
        action_id: isInTree
        recursive: true
        sha: "%payload.pull_request.head.sha%"
      # check for a file in a tree
      - type: gate
        left: "%actions.isInTree.data.tree%"
        operator: includes
        right: "path:.gitignore"
        else:
          # if file isn't where expected find true location
          - type: findInTree
            path: .gitignore
            tree: "%actions.isInTree.data.tree%"
            action_id: fileLocation
          # help user with proper file location
          - type: respond
            with: e-wrong-file-location.md
            issue: "{{store.first_pull_num}}"
            data:
              haveFile: "%actions.fileLocation.path%"
              needFile: ".gitignore"
              editLink: "%payload.repository.html_url%/edit/%payload.pull_request.head.ref%/%actions.fileLocation.path%"
              fileName: .gitignore
        #######################################################
        # End filepath verification
        #######################################################
      # - type: respond
      #   with: d-check-a-value.md
      #   data:
      #     value: "Okay, let's keep going..."
      
      - type: respond
        issue: "{{store.first_pull_num}}"
        with: 01_added-gitignore.md

# Step 1-4: Merge PR
  - title: Merge the First Pull Request
    description: Merge the preliminary files to start the project
    event: pull_request.closed
    link: "{{store.first_pull_url}}"
    actions:
      # Close first issue
      - type: closeIssue
        issue: "{{store.first_issue_num}}"
      # Create next issue
      - type: createIssue
        title: Add your Own Python Package
        body: 02_add-python-code.md
        store: 
          second_issue_num: '{{result.data.number}}'
          second_issue_url: '{{result.data.html_url}}'
      # respond with link
      - type: respond
        issue: "{{store.first_pull_num}}"
        with: 02_go-to-next-issue.md
        data:
          quicklink: "{{store.second_issue_url}}"

# Next step will look for pull_request.opened (by user this time...)

# Step 2: Create setup.py
  - title: Create a Setup.py
    description: NA
    event: push
    link: '{{ repoUrl }}/issues/1' 
    actions: 
    - type: getFileContents
      action_id: setup1Contents
      filename: 'setup.py'
    - type: gate 
      # Checks whether first 3 lines in https://github.com/pypa/sampleproject/blob/master/setup.py exist
      left: '/from\ssetuptools\simport\ssetup,\sfind_packages\nimport\spathlib\n\nhere\s=\spathlib.Path/g'     
      operator: test
      right: '%actions.setup1Contents%'
      else:
        - type: respond
          with: 01_bad-setup.md
          issue: 1
    - type: createIssue
      title: Follow style guidelines
      body: 02_follow-style-guidelines.md
      action_id: second_issue
    - type: respond
      with: 01_successful-push.md
      issue: 1 # Respond to issue 1
      data:
        url: '%actions.second_issue.data.html_url%'

# Step 3: Format existing code in formatter.py
  - title: Format existing code in formatting.py
    description: NA
    event: push
    link: '{{ repoUrl }}/issues/2' 
    actions: 
    - type: getFileContents
      action_id: formattingContents
      filename: 'formatting.py'
    - type: gate 
      # We need to write a regex that checks whether the file contains the solution we desire (currently checks if file contains 'x = 5')
      left: '/x\s=\s5/g'     
      operator: test
      right: '%actions.formattingContents%'
      else:
        - type: respond
          with: 02_bad-formatter.md
          issue: 2
    - type: respond
      with: 02_add-google-style-comment.md
      issue: 2
# Step 4: Add google-style comment blocks in formatting.py
  - title: Add google-style comment blocks in formatting.py
    description: NA
    event: push
    link: '{{ repoUrl }}/issues/2' 
    actions: 
    # Need to write a regex to check for comment blocks. Ideally we should write multiple gates for multiple comment types the user can add
    # Refer to https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html for google comment examples
    # Currently, only one simple regex check is executed
    - type: getFileContents
      action_id: formatting2Contents
      filename: 'formatting.py'
    - type: gate 
      # We need to write a regex that checks whether the file contains the solution we desire (currently checks if file contains 'x = 5')
      left: '/x\s=\s5/g'     
      operator: test
      right: '%actions.formatting2Contents%'
      else:
        - type: respond
          with: 02_bad-google-comment.md
          issue: 2
    - type: createIssue
      title: Pip install and requirements.txt
      body: 03_pip-and-venv.md
      action_id: third_issue
    - type: respond
      with: 02_successful-push.md
      issue: 2
      data:
        url: '%actions.third_issue.data.html_url%'

# Step 5: Create dependencies in setup.py and use pip tools to create a requirements.txt
  - title: Create dependencies in setup.py and use pip tools to create a requirements.txt
    description: NA
    event: push
    link: '{{ repoUrl }}/issues/3' 
    actions: 
    - type: getFileContents
      action_id: setup2Contents
      filename: 'setup.py'
    - type: gate 
      # We need to write a regex that checks whether the file contains the solution we desire (currently checks if file contains 'a = 5')
      left: '/a\s=\s5/g'     
      operator: test
      right: '%actions.setup2Contents%'
      else:
        - type: respond
          with: 03_bad-setup.md
          issue: 3
    - type: getFileContents
      action_id: requirementsContents
      filename: 'requirements.txt'
    - type: gate 
      # We need to write a regex that checks whether the file contains the solution we desire (currently checks if file contains 'numpy')
      left: '/numpy/g'     
      operator: test
      right: '%actions.requirementsContents%'
      else:
        - type: respond
          with: 03_bad-requirements.md
          issue: 3
    - type: respond
      with: 03_activate-venv.md
      issue: 3

# Step 6: Install/create/activate virtual environment and Pip install packages using requirements.txt
  - title: Install/create/activate virtual environment and Pip install packages using requirements.txt
    description: NA
    event: issue_comment.created
    link: '{{ repoUrl }}/issues/3' 
    actions: 
    - type: gate 
      # We need to write a regex that checks whether the comment contains the output we desire (currently checks if comment contains 'Output')
      left: '/Output/g'     
      operator: test
      right: '%payload.comment.body%'
      else:
        - type: respond
          with: 03_bad-comment.md
          issue: 3
    - type: createIssue
      title: Pytest
      body: 04_pytest.md
      action_id: fourth_issue
    - type: respond
      with: 03_successful-push.md
      issue: 3
      data:
        url: '%actions.fourth_issue.data.html_url%'
# Step 7: Run existing tests in the repository
  - title: Run an existing test
    description: NA
    event: issue_comment.created
    link: '{{ repoUrl }}/issues/4' 
    actions: 
    - type: gate 
      # We need to write a regex that checks whether the comment contains the output we desire (currently checks if comment contains 'ERROR')
      left: '/ERROR/g'     
      operator: test
      right: '%payload.comment.body%'
      else:
        - type: respond
          with: 04_bad-comment.md
          issue: 3
    - type: respond
      with: 04_successful-push.md
      issue: 4

# Step 8: Fix failing test in the repository
  - title: Fix a failing test
    description: Commit the fix to the test in a new branch, create a pull request to merge to fix pytest branch
    event: 
      - pull_request
      - check_suite.completed
    link: '{{ repoUrl }}/issues/4' 
    actions:
      - type: gate
        left: "%payload.pull_request.title%"
        operator: ===
        right: Fix Pytest
        else:
          - type: respond
            with: 04_bad-pull-request.md
            issue: 1
      - type: respond
        with: 04_successful-pr.md
        issue: 1
      - type: gate
        left: "%payload.check_suite.conclusion%"
        operator: ===
        right: success
        else:
          - type: respond
            with: 04_bad-check-run.md
            issue: 1
      - type: respond
        with: 04_successful-push.md
        issue: 1


# Step 9: Create a new test
# same structure as Step 8 with some additional checks maybe checking how many pytests ran.
# - title: 
#  description: 
#  event: 
#  actions: 
#  - type:  #

# Step 7: INTERNAL COMMENT FOR STEP 7
# - title: 
#  description: 
#  event: 
#  actions: 
#  - type: 

# Step 8: INTERNAL COMMENT FOR STEP 8
# - title: 
#  description: 
#  event: 
#  actions: 
#  - type: 

# Step 9: INTERNAL COMMENT FOR STEP 9
# - title: 
#  description: 
#  event: 
#  actions: 
#  - type: 

# Step 10: INTERNAL COMMENT FOR STEP 10
# - title: 
#  description: 
#  event: 
#  actions: 
#  - type: 

# Add additional steps below
